import React, { useRef, useState, useEffect } from 'react';
import axios from 'axios';

const VideoWatermark = () => {

    const videoRef = useRef(null);
    const [showWatermark, setShowWatermark] = useState(false);
    const [watermarkImage, setWatermarkImage] = useState(null);
    const [binaryVideoData, setBinaryVideoData] = useState(null);

    const handleImageChange = (e) => {
        const file = e.target.files[0];
        if (file) {
            const reader = new FileReader();
            reader.onloadend = () => {
                setWatermarkImage(reader.result);
            };
            reader.readAsDataURL(file);
        }
    };

    const addWatermark = () => {
        setShowWatermark(true);
    };

    const downloadWithWatermark = async () => {
        const video = videoRef.current;
        const canvas = document.createElement('canvas');
        canvas.width = video.videoWidth;
        canvas.height = video.videoHeight;
        const ctx = canvas.getContext('2d');

        const audioCtx = new AudioContext();
        const dest = audioCtx.createMediaStreamDestination();

        const videoStream = canvas.captureStream();
        const audioStream = dest.stream;

        const recorder = new MediaRecorder(new MediaStream([videoStream.getVideoTracks()[0], audioStream.getAudioTracks()[0]]), { mimeType: 'video/webm;codecs=vp9,opus' });
        const chunks = [];

        recorder.ondataavailable = (event) => {
            if (event.data.size > 0) {
                chunks.push(event.data);
            }
        };

        recorder.onstop = () => {
            const blob = new Blob(chunks, { type: 'video/webm' });
            const downloadLink = document.createElement('a');
            downloadLink.href = URL.createObjectURL(blob);
            downloadLink.download = 'video_with_watermark.mkv'; // Change the file extension to .mkv
            downloadLink.click();
        };

        recorder.start();
        video.play();

        const drawFrame = () => {
            ctx.clearRect(0, 0, canvas.width, canvas.height);
            ctx.drawImage(video, 0, 0, canvas.width, canvas.height);

            if (showWatermark && watermarkImage) {
                const watermark = new Image();
                watermark.src = watermarkImage;
                const watermarkWidth = 150; // Set the desired width for the circular watermark
                const watermarkHeight = watermarkWidth;
                const watermarkPosition = { x: 10, y: canvas.height - 10 - watermarkHeight };

                // Save the current context state
                ctx.save();

                // Create a circular mask
                ctx.beginPath();
                ctx.arc(watermarkPosition.x + watermarkWidth / 2, watermarkPosition.y + watermarkHeight / 2, watermarkWidth / 2, 0, 2 * Math.PI);
                ctx.closePath();
                ctx.clip();

                // Draw the circular watermark
                ctx.drawImage(watermark, watermarkPosition.x, watermarkPosition.y, watermarkWidth, watermarkHeight);

                // Restore the context to its previous state
                ctx.restore();
            }

            // Add text to the top-center
            const textTopCenter = "World Kidney Day";
            const fontSizeTopCenter = 20;
            ctx.font = `${fontSizeTopCenter}px Arial`;
            ctx.fillStyle = 'white'; // Set the text color
            ctx.textAlign = 'center';
            ctx.fillText(textTopCenter, canvas.width / 2, fontSizeTopCenter + 10); // Adjust the Y position as needed

            // Add text below the first text
            const textBelow = "11th March 2024";
            const fontSizeBelow = 18;
            ctx.font = `${fontSizeBelow}px Arial`;
            ctx.fillText(textBelow, canvas.width / 2, fontSizeTopCenter + fontSizeBelow + 20); // Adjust the Y position as needed

            if (!video.ended) {
                requestAnimationFrame(drawFrame);
            }
        };

        drawFrame();

        // Connect the audio context to the destination
        audioCtx.resume().then(() => {
            const audioSource = audioCtx.createMediaElementSource(video);
            audioSource.connect(dest);
        });

        setTimeout(() => {
            recorder.stop();
            video.pause();
        }, video.duration * 2000);
    };

    // Fetch the binary video data from the server
    useEffect(() => {
        axios.get("/api/auth/pullVideo", { responseType: 'arraybuffer' })
            .then(res => {
                // Create a Blob from the binary data
                const blob = new Blob([res.data], { type: 'video/mp4' });
                setBinaryVideoData(blob);
            })
            .catch(err => console.log(err));
    }, []);

    // Update the video source when binary data changes
    useEffect(() => {
        if (binaryVideoData) {
            // Create a URL for the Blob
            const videoURL = URL.createObjectURL(binaryVideoData);

            // Set the video source to the created URL
            const videoPlayer = videoRef.current;
            if (videoPlayer) {
                videoPlayer.src = videoURL;
            }
        }
    }, [binaryVideoData]);

    return (
        <div style={{ position: 'relative' }}>
            <video ref={videoRef} controls width="500">
                <source src={binaryVideoData ? videoRef.current.src : ''} type="video/mp4" />
                Your browser does not support the video tag.
            </video>
            {showWatermark && watermarkImage && (
                <div style={{ position: 'absolute', bottom: '10px', left: '10px', borderRadius: '50%', overflow: 'hidden' }}>
                    <img src={watermarkImage} alt="Watermark" style={{ maxWidth: '100px', borderRadius: '50%' }} />
                </div>
            )}
            <input type="file" accept="image/*" onChange={handleImageChange} />
            <button onClick={addWatermark}>Add Watermark</button>
            <button onClick={downloadWithWatermark}>Download with Watermark</button><br />
        </div>
    );
};

export default VideoWatermark;
