//Client Code..............

import React, { useRef, useState, useEffect } from 'react';
import axios from 'axios';
import doc from "../data/doc.mp4";
import { message } from "antd";

const VideoWatermark = () => {
    const videoRef = useRef(null);
    const [showWatermark, setShowWatermark] = useState(false);
    const [watermarkImage, setWatermarkImage] = useState(null);
    const [binaryVideoData, setBinaryVideoData] = useState(null);
    const [inputText, setInputText] = useState("");

    //Input text handling.....
    const handleInputTxt = (e) => {
        setInputText(e.target.value);
    }

    const handleImageChange = (e) => {
        const file = e.target.files[0];
        if (file) {
            const reader = new FileReader();
            reader.onloadend = () => {
                setWatermarkImage(reader.result);
            };
            reader.readAsDataURL(file);
        }
    };

    const addWatermark = () => {
        setShowWatermark(true);
    };

    const downloadWithWatermark = async () => {
        const video = videoRef.current;
        const canvas = document.createElement('canvas');
        canvas.width = video.videoWidth / 2;
        canvas.height = video.videoHeight / 2;
        const ctx = canvas.getContext('2d');

        const audioCtx = new AudioContext();
        const dest = audioCtx.createMediaStreamDestination();

        const videoStream = canvas.captureStream();
        const audioStream = dest.stream;

        const recorder = new MediaRecorder(new MediaStream([videoStream.getVideoTracks()[0], audioStream.getAudioTracks()[0]]), { mimeType: 'video/webm' });
        const chunks = [];

        recorder.ondataavailable = (event) => {
            if (event.data.size > 0) {
                chunks.push(event.data);
            }
        };

        //Original Code....
        // recorder.onstop = () => {
        //     const blob = new Blob(chunks, { type: 'video/webm' });
        //     const downloadLink = document.createElement('a');
        //     downloadLink.href = URL.createObjectURL(blob);
        //     downloadLink.download = 'video_with_watermark.webm';
        //     downloadLink.click();
        //     window.alert('Video Successfully Fetched');
        // };

        recorder.onstop = async () => {
            const blob = new Blob(chunks, { type: 'video/webm' });
            const formData = new FormData();
            formData.append('video', blob, 'PostVideo.webm');
            console.log(formData.get('video'));

            try {
                const response = await axios.post('/api/auth/videoCon', formData, {
                    headers: {
                        'Content-Type': 'multipart/form-data'
                    },
                    // Ensure response type is set to arraybuffer to receive binary data
                    responseType: 'arraybuffer'
                });

                // Create a Blob object from the video data received in the response
                const videoBlob = new Blob([response.data], { type: 'video/mp4' });

                // Create a URL for the video blob
                const videoBlobUrl = URL.createObjectURL(videoBlob);

                // Create a link element
                const downloadLink = document.createElement('a');
                downloadLink.href = videoBlobUrl;
                downloadLink.download = 'DownloadedVideo.mp4';
                downloadLink.style.display = 'none';

                // Append the link to the document body
                document.body.appendChild(downloadLink);

                // Simulate a click event to trigger the download
                downloadLink.click();

                // Remove the download link from the document body after download
                document.body.removeChild(downloadLink);

                console.log('Video successfully sent to server for download:', response.data);
            } catch (error) {
                console.error('Error while sending video to server:', error);
            }
        };

        recorder.start();
        video.play();

        //For smooth transition...
        const easeInOutQuad = (t) => {
            return t < 0.5 ? 2 * t * t : -1 + (4 - 2 * t) * t;
        }

        const drawFrame = () => {
            ctx.clearRect(0, 0, canvas.width, canvas.height);
            ctx.drawImage(video, 0, 0, canvas.width, canvas.height);

            if (showWatermark && watermarkImage) {
                const watermark = new Image();
                watermark.src = watermarkImage;

                const watermarkMaxWidth = canvas.width;
                const watermarkMaxHeight = canvas.height;

                const elapsedTime = video.currentTime;

                let watermarkWidth, watermarkHeight, watermarkPosition;

                let heldSize = { width: 50, height: 50 }; // Default size for initialization
                let heldPosition = { x: 0, y: 0 }; // Default position for initialization

                // Define pulse parameters
                const pulseFrequency = 8;
                const pulseAmplitude = 3;


                if (elapsedTime <= 10) {
                    const progress = elapsedTime / 2;

                    // Minimum size to avoid reaching zero
                    const minSize = 289;

                    // Calculate size with a minimum size
                    watermarkWidth = Math.max(minSize, watermarkMaxWidth - progress * (watermarkMaxWidth - minSize));
                    watermarkHeight = Math.max(minSize, watermarkMaxHeight - progress * (watermarkMaxHeight - minSize));

                    // Add pulsing effect
                    const pulseSize = Math.sin(elapsedTime * pulseFrequency) * pulseAmplitude;
                    watermarkWidth += pulseSize;
                    watermarkHeight += pulseSize;

                    watermarkPosition = {
                        x: 60,  // Adjusted to stay at the middle-left side
                        y: (canvas.height - watermarkHeight) / 2,
                    };

                    //Store the calculated size....
                    heldSize = { width: watermarkWidth, height: watermarkHeight };
                    heldPosition = { x: watermarkPosition.x, y: watermarkPosition.y };
                }
                else if (elapsedTime <= 28) {
                    if (elapsedTime <= 10 + 1) {
                        // During the first 2 seconds of the transition period (10 seconds to 12 seconds), calculate the eased progress
                        const progress = (elapsedTime - 10) / 1;

                        // Apply easing function to create a smooth motion
                        const easedProgress = easeInOutQuad(progress);

                        // Calculate the position based on the easing progress
                        heldPosition = {
                            x: canvas.width / 4 + 5 + easedProgress * (canvas.width / 2 - 120),
                            y: (canvas.height - heldSize.height * 6) / 2,
                        };

                    } else {
                        // After the first 2 seconds, stay at middle-right side without further easing
                        heldPosition = {
                            x: canvas.width / 2 + 120, // Middle-right side
                            y: (canvas.height - heldSize.height * 6) / 2,
                        };
                    }

                    watermarkPosition = heldPosition;

                    // Adjust the watermark size after the transition
                    watermarkWidth = heldSize.width * 6;
                    watermarkHeight = heldSize.height * 6;

                    // Add pulsing effect
                    const pulseSize = Math.sin(elapsedTime * pulseFrequency) * pulseAmplitude;
                    watermarkWidth += pulseSize;
                    watermarkHeight += pulseSize;

                }
                else if (elapsedTime > 28) {
                    const transitionDuration = 1; // Duration of the transition to the left side

                    if (elapsedTime <= 28 + transitionDuration) {
                        // During the transition period (from 27 seconds to 29 seconds), calculate the eased progress
                        const progress = (elapsedTime - 28) / transitionDuration;

                        // Apply easing function to create a smooth motion
                        const easedProgress = easeInOutQuad(progress);

                        // Calculate the position based on the easing progress to move to the left side
                        heldPosition = {
                            x: canvas.width / 2 + 120 - easedProgress * (canvas.width / 2 - 5),
                            y: (canvas.height - heldSize.height * 6) / 2,
                        };

                    } else {
                        // After the transition, stay at the middle-left side without further easing
                        heldPosition = {
                            x: 55, // Middle-left side
                            y: (canvas.height - heldSize.height * 6) / 2,
                        };
                    }

                    watermarkPosition = heldPosition;

                    // Adjust the watermark size after the transition
                    watermarkWidth = heldSize.width * 6;
                    watermarkHeight = heldSize.height * 6;

                    // Add pulsing effect
                    const pulseSize = Math.sin(elapsedTime * pulseFrequency) * pulseAmplitude;
                    watermarkWidth += pulseSize;
                    watermarkHeight += pulseSize;

                }

                // Draw the watermark
                ctx.drawImage(watermark, watermarkPosition.x, watermarkPosition.y, watermarkWidth, watermarkHeight);

                // Add static text below the watermark
                const staticText = inputText;
                const topMargin = 32;
                const textPosition = {
                    x: watermarkPosition.x + (watermarkWidth - ctx.measureText(staticText).width) / 2,
                    y: watermarkPosition.y + watermarkHeight + topMargin, // Adjust the vertical position as needed
                };

                ctx.fillStyle = "black";
                ctx.font = "bold 37px 'Poppins', sans-serif";
                ctx.fillText(staticText, textPosition.x, textPosition.y);
            }

            if (!video.ended) {
                setTimeout(() => {
                    requestAnimationFrame(drawFrame);
                }, 1000 / 15); // Adjust the frame rate (15 frames per second in this example)
            }
        };

        // Start drawing frames
        drawFrame();


        // Connect the audio context to the destination
        audioCtx.resume().then(() => {
            const audioSource = audioCtx.createMediaElementSource(video);
            audioSource.connect(dest);
        });

        setTimeout(() => {
            recorder.stop();
            video.pause();
        }, video.duration * 1000);

    };


    useEffect(() => {
        axios.get("/api/auth/pullVideo", { responseType: 'arraybuffer' })
            .then(res => {
                const blob = new Blob([res.data], { type: 'video/mp4' });
                setBinaryVideoData(blob);
            })
            .catch(err => console.log(err));
    }, []);


    useEffect(() => {
        if (binaryVideoData) {
            const videoURL = URL.createObjectURL(binaryVideoData);
            const videoPlayer = videoRef.current;
            if (videoPlayer) {
                videoPlayer.src = videoURL;
            }
        }
    }, [binaryVideoData]);

    return (
        <div style={{ position: 'relative' }}>
            <video ref={videoRef} controls width="500">
                <source src={doc} type="video/mp4" />
                Your browser does not support the video tag.
            </video>
            {showWatermark && watermarkImage && (
                <div style={{ position: 'absolute', bottom: '10px', left: '10px', borderRadius: '50%', overflow: 'hidden' }}>
                    <img src={watermarkImage} alt="Watermark" style={{ maxWidth: '100px', borderRadius: '50%' }} />
                </div>
            )}
            <input type='text' value={inputText} onChange={handleInputTxt} placeholder="Enter text" />
            <input type="file" accept="image/*" onChange={handleImageChange} />
            <button onClick={addWatermark}>Add Watermark</button>
            <button onClick={downloadWithWatermark}>Download with Watermark</button>
        </div>
    );
};

export default VideoWatermark;



//Server Code.....
const ffmpeg = require('fluent-ffmpeg');
const fs = require('fs');
const path = require('path');

// //Convert video into mp4 format....
const videoConvertor = async (req, res) => {
    try {
        const { buffer, originalname } = req.file;

        // Define the path where the uploaded video will be saved....
        const uploadDir = path.join('S:/PROGRAMS/Mern_Stack Projects/Internship/winter/Server', 'uploads');
        const videoFilePath = path.join(uploadDir, originalname);
        console.log('videoFilePath', videoFilePath);

        // Write the buffer to a file on the server
        fs.writeFileSync(videoFilePath, buffer);

        // Specify the output file path for the converted video....
        // const outputFilePath = path.join('S:/PROGRAMS/Mern_Stack Projects/Internship/winter/Server', 'VideoOutput', 'originalname1.mp4');
        const outputFilePath = path.join('S:/PROGRAMS/Mern_Stack Projects/Internship/winter/Server', 'VideoOutput', originalname.replace(/\.[^/.]+$/, ".mp4"));
        console.log(outputFilePath);

        // Convert the uploaded video to MP4 using ffmpeg
        ffmpeg(videoFilePath)
            .output(outputFilePath)
            .videoCodec('libx264')
            .audioCodec('aac')
            .on('end', async() => {
                console.log(`Video MP4 Conversion finished....`.bgCyan.white);
                // Send the converted video file back to the client
                res.status(200).sendFile(outputFilePath,()=>{
                    // Remove both the uploaded and converted video files
                    fs.unlinkSync(videoFilePath);
                    fs.unlinkSync(outputFilePath);
                });
            })
            .on('error', (err) => {
                console.error('Error:', err);
                res.status(500).end();
            })
            .run();
    } catch (err) {
        console.log(err);
        res.status(501).send({ message: "Data is not sent." });
    }
}
