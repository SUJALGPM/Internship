//Test script async all at same time....
const uploadVideoToAPI = async (videoPath, videoName) => {
  try {
    const videoBuffer = await fs.promises.readFile(videoPath);
    const formData = new FormData();
    formData.append("video", videoBuffer, { filename: videoName });

    const response = await axios.post(
      "https://icreatevideo.digilateral.com/api/auth/videoCon",
      formData,
      {
        headers: {
          ...formData.getHeaders(),
        },
      }
    );

    console.log(`Uploaded ${videoName}`.bgBlue.white);
  } catch (error) {
    console.error(`Error uploading ${videoName}:`, error);
  }
};
const uploadVideosInParallel = async () => {
  const folderPath =
    "C:/Users/devel/OneDrive/Sujal Work/iCreateVideo-Project/iCreateVideo-Backend/TestVideo";
  const files = fs.readdirSync(folderPath);
  const videoFiles = files.filter((file) => file.endsWith(".webm"));

  const uploadPromises = [];
  for (const videoFile of videoFiles) {
    const videoPath = path.join(folderPath, videoFile);
    const uploadPromise = uploadVideoToAPI(videoPath, videoFile);
    uploadPromises.push(uploadPromise);
  }

  try {
    await Promise.all(uploadPromises);
    console.log("All webm video files uploaded successfully.".bgYellow.black);
  } catch (error) {
    console.error("Error uploading videos:", error);
  }
};

uploadVideosInParallel();



let processingQueue = [];
let totalVideosProcessed = 0;
let successfulConversions = 0;
const videoConvertor = async (req, res) => {
  try {
    const { buffer, originalname } = req.file;

    // Generate a random number as a unique identifier
    const uniqueCode = Math.floor(Math.random() * 100000);

    // Append the unique code to the original filename
    const newFileName = `${originalname.replace(
      /\.[^/.]+$/,
      ""
    )}_${uniqueCode}.mp4`;

    // Define the path where the uploaded video will be saved
    const uploadDir = path.join(__dirname, "inputVideo2");
    const videoFilePath = path.join(uploadDir, newFileName);
    console.log("videoFilePath", videoFilePath);

    if (!fs.existsSync(uploadDir)) {
      fs.mkdirSync(uploadDir, { recursive: true });
    }
    fs.writeFileSync(videoFilePath, buffer);

    const outputDir = path.join(__dirname, "outputVideo2");
    const outputFilePath = path.join(
      outputDir,
      newFileName.replace(/\.[^/.]+$/, ".mp4")
    );
    console.log(outputFilePath);

    if (!fs.existsSync(outputDir)) {
      fs.mkdirSync(outputDir, { recursive: true });
    }

    // Add the video to the processing queue
    processingQueue.push(newFileName);
    totalVideosProcessed++;

    async.parallelLimit(
      [
        function (callback) {
          const ffmpegProcess = ffmpeg(videoFilePath)
            .setStartTime(1)
            .output(outputFilePath)
            .videoCodec("libx264")
            .audioCodec("aac")
            .outputFPS(24)
            .on("start", (commandLine) => {
              console.log(`Processing video: ${newFileName}`);
              console.log(`FFmpeg command: ${commandLine}`);
            })
            .on("end", () => {
              console.log(
                `Video ${newFileName} MP4 Conversion finished....`.bgCyan.white
              );

              // Increment the counter for successful conversions
              successfulConversions++;
              console.log(
                `Successful conversions count: ${successfulConversions}`
                  .bgMagenta.white
              );

              // Remove the video from the processing queue
              processingQueue = processingQueue.filter(
                (item) => item !== newFileName
              );
              callback(null, outputFilePath);
            })
            .on("error", (err) => {
              console.error("Error:", err);
              callback(err);
            })
            .run();
        },
      ],
      5,
      function (err, results) {
        if (!err) {
          res
            .status(200)
            .contentType("video/mp4")
            .header("NewFileName", `${newFileName}`)
            .sendFile(results[0], (err) => {
              if (err) {
                console.error("Error sending file:", err);
              } else {
                // Remove the processed file from the processingQueue
                const processedFile = results[0].split(path.sep).pop();
                processingQueue = processingQueue.filter(
                  (item) => item !== processedFile
                );

                // Delete the input and output video files
                fs.unlinkSync(videoFilePath);
                fs.unlinkSync(outputFilePath);

                // Log the updated processingQueue
                console.log(
                  `Updated processingQueue stack : [${processingQueue}]`
                    .bgMagenta.white
                );
                console.log(
                  `Updated remaining queue Count : [${processingQueue.length}]`
                    .bgMagenta.white
                );

                // Log the total processed and successful conversion counts
                console.log(
                  `Total videos processed: ${totalVideosProcessed}`.bgBlue.white
                );
                console.log(
                  `Total successful conversions: ${successfulConversions}`
                    .bgGreen.white
                );
              }
            });
        } else {
          console.error("Async error:", err);
          res.status(500).end();
        }
      }
    );

    // Print the videos in processing queue
    console.log(
      `Videos in processing queue: [${processingQueue}]`.bgYellow.black
    );
    console.log(
      `Videos in processing queue Count : [${processingQueue.length}]`.bgYellow
        .black
    );
  } catch (err) {
    console.log(err);
    res.status(501).send({ message: "Data is not sent." });
  }
};


